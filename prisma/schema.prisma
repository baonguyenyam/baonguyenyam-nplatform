generator client {
  provider        = "prisma-client-js"
  // output          = "prisma/generated/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  slug      String    @default(cuid())
  content   String?   @db.Text
  parent    Int?      @default(0)
  type      String    @default("space")
  createdAt DateTime? @default(now())
  published Boolean   @default(false)
  status    String    @default("pending")
  setorder  Int       @default(0)
  posts     Post[]
  orders    Order[]

  @@unique([slug, id])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  title      String     @db.VarChar(255)
  content    String     @db.Text
  slug       String     @default(cuid())
  image      String?    @default("")
  published  Boolean    @default(false)
  status     String     @default("pending")
  user       User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     String
  categories Category[]
  type       String     @default("post")
  data       String?    @db.Text
  setorder   Int        @default(0)

  meta  PostMeta[]
  files File[]

  @@unique([slug, id])
  @@index([userId])
}

model PostMeta {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  key       String?   @db.VarChar(255)
  value     String?   @db.Text

  post   Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int

  @@index([postId])
}

model File {
  id        Int        @id @default(autoincrement())
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  hash      String?
  name      String     @default("file") @db.VarChar(255)
  ext       String     @default(".unknown") @db.VarChar(255)
  size      Int?       @default(0)
  url       String     @db.Text
  type      String     @default("image")
  data      String?    @db.Text
  published Boolean    @default(false)
  status    String     @default("pending")
  post      Post[]
  customer  Customer[]
  order     Order[]
  user      User?      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String?

  @@unique([id])
}

model Setting {
  id        Int       @id @default(autoincrement())
  key       String    @db.VarChar(255)
  value     String    @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([key, id])
  @@index([key])
}

model Customer {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  first_name    String?
  last_name     String?
  image         String?
  address       String?
  city          String?
  state         String?
  zip           String?
  country       String?
  company       String?
  avatar        String?
  type          String?   @default("customer")
  files         File[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  published     Boolean   @default(false)
  data          String?   @db.Text

  order_customer Order[] @relation("OrderCustomer")
  order_vendor   Order[] @relation("OrderVendor")

  @@unique([id])
}

model Order {
  id        String    @id @default(cuid())
  status    String?   @default("pending")
  total     Float?    @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  title     String?
  content   String?
  image     String?
  published Boolean   @default(false)
  data      String?   @db.Text

  date_created    DateTime?
  date_production DateTime?
  date_paid       DateTime?
  date_shipped    DateTime?
  date_delivered  DateTime?
  date_completed  DateTime?
  date_cancelled  DateTime?
  date_refunded   DateTime?
  date_failed     DateTime?
  date_closed     DateTime?
  date_approved   DateTime?

  files      File[]
  meta       OrderMeta[]
  categories Category[]

  user           User[] @relation("OrderUsers")
  user_product   User[] @relation("OrderUserProducts")
  user_delivery  User[] @relation("OrderUserDelivery")
  user_manager   User[] @relation("OrderUserManager")
  user_quality   User[] @relation("OrderUserQuality")
  user_designer  User[] @relation("OrderUserDesigner")
  user_financial User[] @relation("OrderUserFinancial")
  user_technical User[] @relation("OrderUserTechnical")
  user_packaging User[] @relation("OrderUserPackaging")

  vendor   Customer[] @relation("OrderVendor")
  customer Customer[] @relation("OrderCustomer")

  @@unique([id])
}

model OrderMeta {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  key       String?   @db.VarChar(255)
  value     String?   @db.Text

  order   Order  @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId String

  @@index([orderId])
}

model Attribute {
  id        Int             @id @default(autoincrement())
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt
  title     String          @db.VarChar(255)
  content   String?         @db.Text
  type      String?
  mapto     String?         @default("user") @db.VarChar(255)
  meta      AttributeMeta[]
  published Boolean         @default(false)

  childrenId Int?
  children   Attribute[] @relation("Parent")
  parent     Attribute?  @relation("Parent", fields: [childrenId], references: [id])

  order Int? @default(0)

  @@unique([id])
}

model AttributeMeta {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  key         String?   @db.VarChar(255)
  value       String?   @db.Text
  data        String?   @db.Text
  attribute   Attribute @relation(fields: [attributeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attributeId Int

  order Int? @default(0)

  @@unique([id])
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phone                 String?
  first_name            String?
  last_name             String?
  image                 String?
  address               String?
  city                  String?
  state                 String?
  zip                   String?
  country               String?
  avatar                String?
  role                  UserRole?              @default(USER)
  accounts              Account[]
  posts                 Post[]
  files                 File[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  published             Boolean                @default(false)
  data                  String?                @db.Text

  orders          Order[] @relation("OrderUsers")
  order_products  Order[] @relation("OrderUserProducts")
  order_delivery  Order[] @relation("OrderUserDelivery")
  order_manager   Order[] @relation("OrderUserManager")
  order_quality   Order[] @relation("OrderUserQuality")
  order_designer  Order[] @relation("OrderUserDesigner")
  order_financial Order[] @relation("OrderUserFinancial")
  order_technical Order[] @relation("OrderUserTechnical")
  order_packaging Order[] @relation("OrderUserPackaging")

  @@unique([id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //--> means that the combination of email and token must be unique
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) //--? relation to the user model and the user id field. onDelete: Cascade means that if the user is deleted, the confirmation will also be deleted

  @@unique([userId])
}
